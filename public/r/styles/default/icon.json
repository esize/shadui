{
  "name": "icon",
  "type": "registry:ui",
  "description": "Dynamic icon component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/icon.tsx",
      "content": "\"use server\";\nimport { type LucideProps, icons } from \"lucide-react\";\n\ntype IconComponentName = keyof typeof icons;\n\ninterface IconProps extends LucideProps {\n  name: string;\n}\n\nfunction isValidIconComponent(\n  componentName: string\n): componentName is IconComponentName {\n  return componentName in icons;\n}\n\nexport default async function DynamicIcon({ name, ...props }: IconProps) {\n  const kebabToPascal = (str: string) =>\n    str\n      .split(\"-\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\"\");\n\n  const componentName = kebabToPascal(name);\n\n  if (!isValidIconComponent(componentName)) {\n    return null;\n  }\n\n  const Icon = icons[componentName];\n\n  return <Icon {...props} />;\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}