{
  "name": "icon-selector",
  "type": "registry:ui",
  "description": "Icon selector component",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-virtual"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover"
  ],
  "files": [
    {
      "path": "ui/icon-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Check, ChevronsUpDown, Search } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport DynamicIcon from \"@/components/ui/icon\";\nimport { icons } from \"lucide-react\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\n\nexport interface IconSelectorProps {\n  value?: string;\n  onSelect: (value: string | null) => void;\n}\n\nfunction toTitleCase(str: string) {\n  return str\n    .split(\"-\")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}\n\nexport function IconSelector({\n  value: controlledValue,\n  onSelect,\n}: IconSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [internalValue, setInternalValue] = React.useState<string | null>(\n    controlledValue || null\n  );\n  const [search, setSearch] = React.useState(\"\");\n  const [highlightedIndex, setHighlightedIndex] = React.useState(0);\n  const searchInputRef = React.useRef<HTMLInputElement>(null);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n\n  const value = controlledValue !== undefined ? controlledValue : internalValue;\n\n  const iconList = React.useMemo(\n    () =>\n      Object.keys(icons)\n        .map((name) =>\n          name\n            .replace(/([A-Z])/g, \"-$1\")\n            .toLowerCase()\n            .replace(/^-/, \"\")\n        )\n        .filter((name) => name !== \"create-lucide-icon\")\n        .sort(),\n    []\n  );\n\n  const filteredIcons = React.useMemo(\n    () =>\n      iconList.filter((icon) =>\n        icon.toLowerCase().includes(search.toLowerCase())\n      ),\n    [iconList, search]\n  );\n\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const [parentWidth, setParentWidth] = React.useState(0);\n\n  React.useEffect(() => {\n    if (open && parentRef.current) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        for (const entry of entries) {\n          setParentWidth(entry.contentRect.width);\n        }\n      });\n\n      resizeObserver.observe(parentRef.current);\n      return () => resizeObserver.disconnect();\n    }\n  }, [open]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: filteredIcons.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 36,\n    overscan: 5,\n    initialOffset: 0,\n    measureElement: undefined,\n    paddingStart: 0,\n    paddingEnd: 0,\n  });\n\n  React.useEffect(() => {\n    if (open) {\n      setTimeout(() => {\n        rowVirtualizer.measure();\n        rowVirtualizer.scrollToOffset(0);\n      }, 0);\n    }\n  }, [open, rowVirtualizer]);\n\n  React.useEffect(() => {\n    setHighlightedIndex(0);\n  }, [filteredIcons]);\n\n  React.useEffect(() => {\n    if (open && highlightedIndex !== -1) {\n      rowVirtualizer.scrollToIndex(highlightedIndex, {\n        align: \"auto\",\n      });\n    }\n  }, [open, highlightedIndex, rowVirtualizer]);\n\n  const handleSelect = React.useCallback(\n    (newValue: string) => {\n      const finalValue = newValue === value ? null : newValue;\n      setInternalValue(finalValue);\n      onSelect(finalValue);\n      setOpen(false);\n      setSearch(\"\");\n      if (triggerRef.current) {\n        triggerRef.current.focus();\n      }\n    },\n    [value, onSelect]\n  );\n\n  const handleTriggerKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\n      if (\n        !open &&\n        event.key.length === 1 &&\n        event.key.match(/^[a-zA-Z0-9]$/) &&\n        !event.ctrlKey &&\n        !event.altKey &&\n        !event.metaKey\n      ) {\n        event.preventDefault();\n        setOpen(true);\n        // Delay setting the search value until after the input is mounted\n        setTimeout(() => {\n          setSearch(event.key);\n          if (searchInputRef.current) {\n            searchInputRef.current.value = event.key;\n          }\n        }, 0);\n      }\n    },\n    [open]\n  );\n\n  const handleSearchKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      switch (event.key) {\n        case \"ArrowDown\":\n          event.preventDefault();\n          setHighlightedIndex((prev) =>\n            Math.min(prev + 1, filteredIcons.length - 1)\n          );\n          break;\n\n        case \"ArrowUp\":\n          event.preventDefault();\n          setHighlightedIndex((prev) => Math.max(prev - 1, 0));\n          break;\n\n        case \"Enter\":\n          event.preventDefault();\n          if (\n            highlightedIndex >= 0 &&\n            highlightedIndex < filteredIcons.length\n          ) {\n            handleSelect(filteredIcons[highlightedIndex]);\n          }\n          break;\n\n        case \"Escape\":\n          event.preventDefault();\n          setOpen(false);\n          setSearch(\"\");\n          if (triggerRef.current) {\n            triggerRef.current.focus();\n          }\n          break;\n      }\n    },\n    [filteredIcons, highlightedIndex, handleSelect]\n  );\n\n  return (\n    <div>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            ref={triggerRef}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-[200px] justify-between\"\n            onKeyDown={handleTriggerKeyDown}\n          >\n            <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n              {value ? (\n                <div className=\"flex items-center gap-2 min-w-0\">\n                  <DynamicIcon name={value} className=\"h-4 w-4 shrink-0\" />\n                  <span className=\"truncate\">{toTitleCase(value)}</span>\n                </div>\n              ) : (\n                <span>Select icon</span>\n              )}\n            </div>\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[200px] p-2\">\n          <div className=\"flex items-center border-b px-3\">\n            <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n            <Input\n              ref={searchInputRef}\n              placeholder=\"Search icons...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              onKeyDown={handleSearchKeyDown}\n              className=\"h-8 w-full border-0 bg-transparent p-0 placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-0\"\n            />\n          </div>\n          <div\n            ref={parentRef}\n            className=\"relative h-[200px] overflow-y-auto mt-2 -mx-2 scrollbar-custom\"\n            style={{\n              contain: \"strict\",\n            }}\n          >\n            <div\n              style={{\n                height: `${rowVirtualizer.getTotalSize()}px`,\n                width: \"100%\",\n                position: \"relative\",\n              }}\n            >\n              {rowVirtualizer.getVirtualItems().map((virtualItem) => {\n                const icon = filteredIcons[virtualItem.index];\n                const isHighlighted = virtualItem.index === highlightedIndex;\n                return (\n                  <Button\n                    key={virtualItem.key}\n                    variant=\"ghost\"\n                    role=\"option\"\n                    aria-selected={value === icon}\n                    data-highlighted={isHighlighted}\n                    className={cn(\n                      \"absolute left-0 w-full justify-start gap-2 rounded-none px-2\",\n                      value === icon && \"bg-accent\",\n                      isHighlighted && \"bg-accent-foreground text-accent\"\n                    )}\n                    style={{\n                      height: `${virtualItem.size}px`,\n                      transform: `translateY(${virtualItem.start}px)`,\n                      width: parentWidth || \"100%\",\n                    }}\n                    onClick={() => handleSelect(icon)}\n                  >\n                    <DynamicIcon name={icon} className=\"h-4 w-4 shrink-0\" />\n                    <span className=\"truncate flex-1 text-left\">\n                      {toTitleCase(icon)}\n                    </span>\n                    {value === icon && (\n                      <Check className=\"h-4 w-4 shrink-0 opacity-100\" />\n                    )}\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/icon.tsx",
      "content": "\"use server\";\nimport { type LucideProps, icons } from \"lucide-react\";\n\ntype IconComponentName = keyof typeof icons;\n\ninterface IconProps extends LucideProps {\n  name: string;\n}\n\nfunction isValidIconComponent(\n  componentName: string\n): componentName is IconComponentName {\n  return componentName in icons;\n}\n\nexport default async function DynamicIcon({ name, ...props }: IconProps) {\n  const kebabToPascal = (str: string) =>\n    str\n      .split(\"-\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\"\");\n\n  const componentName = kebabToPascal(name);\n\n  if (!isValidIconComponent(componentName)) {\n    return null;\n  }\n\n  const Icon = icons[componentName];\n\n  return <Icon {...props} />;\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}