{
  "name": "color-selector",
  "type": "registry:ui",
  "description": "Color selector component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "utils",
    "button",
    "popover",
    "label",
    "tabs",
    "tooltip"
  ],
  "files": [
    {
      "path": "ui/color-selector.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { cn } from \"@/lib/utils\";\nimport { Check } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst colors = {\n  red: \"bg-red-500 hover:bg-red-600 data-[selected=true]:ring-red-500\",\n  blue: \"bg-blue-500 hover:bg-blue-600 data-[selected=true]:ring-blue-500\",\n  green: \"bg-green-500 hover:bg-green-600 data-[selected=true]:ring-green-500\",\n  yellow:\n    \"bg-yellow-500 hover:bg-yellow-600 data-[selected=true]:ring-yellow-500\",\n  purple:\n    \"bg-purple-500 hover:bg-purple-600 data-[selected=true]:ring-purple-500\",\n  orange:\n    \"bg-orange-500 hover:bg-orange-600 data-[selected=true]:ring-orange-500\",\n  pink: \"bg-pink-500 hover:bg-pink-600 data-[selected=true]:ring-pink-500\",\n  indigo:\n    \"bg-indigo-500 hover:bg-indigo-600 data-[selected=true]:ring-indigo-500\",\n  teal: \"bg-teal-500 hover:bg-teal-600 data-[selected=true]:ring-teal-500\",\n  brown: \"bg-stone-500 hover:bg-stone-600 data-[selected=true]:ring-stone-500\",\n} as const;\n\nconst gradients = {\n  sunset:\n    \"bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 data-[selected=true]:ring-orange-500\",\n  ocean:\n    \"bg-gradient-to-r from-blue-500 to-teal-500 hover:from-blue-600 hover:to-teal-600 data-[selected=true]:ring-blue-500\",\n  forest:\n    \"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 data-[selected=true]:ring-green-500\",\n  aurora:\n    \"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 data-[selected=true]:ring-purple-500\",\n  sunshine:\n    \"bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 data-[selected=true]:ring-yellow-500\",\n  twilight:\n    \"bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 data-[selected=true]:ring-indigo-500\",\n  cherry:\n    \"bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600 data-[selected=true]:ring-pink-500\",\n  mint: \"bg-gradient-to-r from-teal-500 to-green-500 hover:from-teal-600 hover:to-green-600 data-[selected=true]:ring-teal-500\",\n  dusk: \"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 data-[selected=true]:ring-blue-500\",\n  autumn:\n    \"bg-gradient-to-r from-orange-500 to-brown-500 hover:from-orange-600 hover:to-stone-600 data-[selected=true]:ring-orange-500\",\n} as const;\n\ntype ColorOption = keyof typeof colors;\ntype GradientOption = keyof typeof gradients;\nexport type ColorValue = ColorOption | GradientOption;\nexport const allValues = [\n  ...Object.keys(colors),\n  ...Object.keys(gradients),\n] as const;\ninterface ColorSelectorProps\n  extends Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"value\" | \"onChange\"\n  > {\n  value?: ColorValue;\n  defaultValue?: ColorValue;\n  onChange?: (value: ColorValue) => void;\n}\n\nexport default function ColorSelector({\n  id,\n  value,\n  defaultValue = \"red\",\n  onChange,\n  disabled,\n  ...props\n}: ColorSelectorProps) {\n  const [internalValue, setInternalValue] = React.useState(defaultValue);\n  const [open, setOpen] = React.useState(false);\n  const [activeTab, setActiveTab] = React.useState<\"solid\" | \"gradient\">(\n    \"solid\"\n  );\n  const [focusedIndex, setFocusedIndex] = React.useState(0);\n  const gridRef = React.useRef<HTMLDivElement>(null);\n  const firstColorRef = React.useRef<HTMLButtonElement>(null);\n\n  // Determine if the component is controlled\n  const isControlled = value !== undefined;\n  const currentValue = isControlled ? value : internalValue;\n\n  // Get the current active options based on the tab\n  const activeOptions = activeTab === \"solid\" ? colors : gradients;\n  const optionsArray = Object.keys(activeOptions) as ColorValue[];\n\n  // Handle the color selection\n  const handleColorSelect = (colorOrGradient: ColorValue) => {\n    if (!isControlled) {\n      setInternalValue(colorOrGradient);\n    }\n    onChange?.(colorOrGradient);\n    setOpen(false);\n  };\n\n  const focusFirstColorInTab = React.useCallback(() => {\n    // Use multiple frames to ensure the DOM is ready\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        const firstButton = gridRef.current?.querySelector(\n          'button[tabindex=\"0\"]'\n        ) as HTMLButtonElement;\n        if (firstButton) {\n          firstButton.focus();\n        }\n      });\n    });\n  }, []);\n\n  // Handle popover open\n  React.useEffect(() => {\n    if (open) {\n      // Set initial tab based on current value\n      const newTab = Object.keys(gradients).includes(currentValue)\n        ? \"gradient\"\n        : \"solid\";\n      setActiveTab(newTab);\n\n      // Find and focus the current value\n      const options = newTab === \"solid\" ? colors : gradients;\n      const currentIndex = Object.keys(options).findIndex(\n        (key) => key === currentValue\n      );\n      setFocusedIndex(currentIndex >= 0 ? currentIndex : 0);\n\n      // Focus the first color\n      focusFirstColorInTab();\n    }\n  }, [open, currentValue, focusFirstColorInTab]);\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    const numColumns = 5;\n    const numRows = Math.ceil(optionsArray.length / numColumns);\n    const currentRow = Math.floor(focusedIndex / numColumns);\n    const currentCol = focusedIndex % numColumns;\n\n    switch (e.key) {\n      case \"ArrowRight\": {\n        e.preventDefault();\n        if (currentCol === numColumns - 1) {\n          // At the end of a row\n          if (currentRow < numRows - 1) {\n            // Move to first color of next row\n            setFocusedIndex(focusedIndex + 1);\n          } else {\n            // At the last row, switch tabs if possible\n            if (activeTab === \"solid\") {\n              // Update both tab and focus in a single render\n              setActiveTab(\"gradient\");\n              setFocusedIndex(0);\n              // Ensure focus is set after the tab content is rendered\n              setTimeout(focusFirstColorInTab, 0);\n            }\n          }\n        } else {\n          // Move to next color in row\n          setFocusedIndex((prev) =>\n            prev < optionsArray.length - 1 ? prev + 1 : prev\n          );\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        e.preventDefault();\n        if (currentCol === 0 && currentRow > 0) {\n          // Move to last color of previous row\n          setFocusedIndex(focusedIndex - 1);\n        } else {\n          setFocusedIndex((prev) => (prev > 0 ? prev - 1 : prev));\n        }\n        break;\n      }\n      case \"ArrowDown\": {\n        e.preventDefault();\n        if (currentRow < numRows - 1) {\n          const newIndex = focusedIndex + numColumns;\n          if (newIndex < optionsArray.length) {\n            setFocusedIndex(newIndex);\n          }\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        e.preventDefault();\n        if (currentRow > 0) {\n          setFocusedIndex(focusedIndex - numColumns);\n        }\n        break;\n      }\n      case \"Enter\":\n      case \" \": {\n        e.preventDefault();\n        handleColorSelect(optionsArray[focusedIndex]);\n        break;\n      }\n      case \"Tab\": {\n        // Prevent default tab behavior if we're on a color\n        if (!e.shiftKey && focusedIndex === optionsArray.length - 1) {\n          e.preventDefault();\n          if (activeTab === \"solid\") {\n            setActiveTab(\"gradient\");\n            setFocusedIndex(0);\n            focusFirstColorInTab();\n          }\n        }\n        break;\n      }\n    }\n  };\n\n  // Determine if current value is a gradient\n  const isGradient = Object.keys(gradients).includes(currentValue);\n  const currentStyle = isGradient\n    ? gradients[currentValue as GradientOption]\n    : colors[currentValue as ColorOption];\n\n  return (\n    <TooltipProvider>\n      <div className=\"grid gap-2\">\n        {props.name && (\n          <Label\n            htmlFor={id}\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n          >\n            {props.name}\n          </Label>\n        )}\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              id={id}\n              variant=\"outline\"\n              size=\"default\"\n              className={cn(\n                \"w-[150px] justify-start text-left font-normal\",\n                !currentValue && \"text-muted-foreground\",\n                disabled && \"cursor-not-allowed opacity-50\"\n              )}\n              disabled={disabled}\n            >\n              {currentValue ? (\n                <>\n                  <div\n                    className={cn(\"mr-2 h-5 w-5 rounded-full\", currentStyle)}\n                  />\n                  {currentValue.charAt(0).toUpperCase() + currentValue.slice(1)}\n                </>\n              ) : (\n                <span>Select color</span>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[280px] p-4\">\n            <Tabs\n              value={activeTab}\n              onValueChange={(value) => {\n                setActiveTab(value as \"solid\" | \"gradient\");\n                setFocusedIndex(0);\n                focusFirstColorInTab();\n              }}\n            >\n              <TabsList\n                className=\"w-full mb-4\"\n                onMouseDown={(e) => e.preventDefault()}\n              >\n                <TabsTrigger\n                  value=\"solid\"\n                  className=\"flex-1\"\n                  tabIndex={-1}\n                  onFocus={(e) => {\n                    // If focused via keyboard, move focus to first color\n                    if (!e.currentTarget.contains(e.relatedTarget)) {\n                      focusFirstColorInTab();\n                    }\n                  }}\n                >\n                  Solid\n                </TabsTrigger>\n                <TabsTrigger\n                  value=\"gradient\"\n                  className=\"flex-1\"\n                  tabIndex={-1}\n                  onFocus={(e) => {\n                    // If focused via keyboard, move focus to first color\n                    if (!e.currentTarget.contains(e.relatedTarget)) {\n                      focusFirstColorInTab();\n                    }\n                  }}\n                >\n                  Gradient\n                </TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"solid\">\n                <div\n                  ref={gridRef}\n                  className=\"grid grid-cols-5 gap-3\"\n                  onKeyDown={handleKeyDown}\n                  role=\"grid\"\n                >\n                  {(Object.entries(colors) as [ColorOption, string][]).map(\n                    ([color, className], index) => (\n                      <Tooltip key={color}>\n                        <TooltipTrigger asChild>\n                          <button\n                            ref={index === 0 ? firstColorRef : undefined}\n                            className={cn(\n                              \"h-9 w-9 rounded-md ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n                              className,\n                              currentValue === color && \"ring-2 ring-offset-2\",\n                              focusedIndex === index &&\n                                activeTab === \"solid\" &&\n                                \"ring-2 ring-ring ring-offset-2\"\n                            )}\n                            data-selected={currentValue === color}\n                            onClick={() => handleColorSelect(color)}\n                            disabled={disabled}\n                            aria-label={`Select ${color} color`}\n                            tabIndex={\n                              focusedIndex === index && activeTab === \"solid\"\n                                ? 0\n                                : -1\n                            }\n                            role=\"gridcell\"\n                          >\n                            {currentValue === color && (\n                              <Check className=\"h-5 w-5 text-white mx-auto\" />\n                            )}\n                          </button>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          {color.charAt(0).toUpperCase() + color.slice(1)}\n                        </TooltipContent>\n                      </Tooltip>\n                    )\n                  )}\n                </div>\n              </TabsContent>\n              <TabsContent value=\"gradient\">\n                <div\n                  className=\"grid grid-cols-5 gap-3\"\n                  onKeyDown={handleKeyDown}\n                  role=\"grid\"\n                >\n                  {(\n                    Object.entries(gradients) as [GradientOption, string][]\n                  ).map(([gradient, className], index) => (\n                    <Tooltip key={gradient}>\n                      <TooltipTrigger asChild>\n                        <button\n                          className={cn(\n                            \"h-9 w-9 rounded-md ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n                            className,\n                            currentValue === gradient && \"ring-2 ring-offset-2\",\n                            focusedIndex === index &&\n                              activeTab === \"gradient\" &&\n                              \"ring-2 ring-ring ring-offset-2\"\n                          )}\n                          data-selected={currentValue === gradient}\n                          onClick={() => handleColorSelect(gradient)}\n                          disabled={disabled}\n                          aria-label={`Select ${gradient} gradient`}\n                          tabIndex={\n                            focusedIndex === index && activeTab === \"gradient\"\n                              ? 0\n                              : -1\n                          }\n                          role=\"gridcell\"\n                        >\n                          {currentValue === gradient && (\n                            <Check className=\"h-5 w-5 text-white mx-auto\" />\n                          )}\n                        </button>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        {gradient.charAt(0).toUpperCase() + gradient.slice(1)}\n                      </TooltipContent>\n                    </Tooltip>\n                  ))}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </PopoverContent>\n        </Popover>\n        <input\n          type=\"hidden\"\n          name={props.name}\n          value={currentValue}\n          {...props}\n        />\n      </div>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}